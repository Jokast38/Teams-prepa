:::UserList::::
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import './css/UserList.css' // Ajout du fichier CSS;



interface User {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
}

const fetchUsers = async (): Promise<User[]> => {
  const { data } = await axios.get("http://localhost:3003/users");
  return data;
};

const UserList = () => {
  const { data, error, isLoading } = useQuery<User[]>({
    queryKey: ["users"],
    queryFn: fetchUsers,
  });

  if (isLoading)
    return (
      <div className="flex justify-center items-center h-20">
        <p className="text-blue-500 font-semibold">Chargement des utilisateurs...</p>
      </div>
    );

  if (error)
    return (
      <div className="text-center text-red-500">
        <p>Erreur lors du chargement des utilisateurs.</p>
      </div>
    );

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-6 text-center text-gray-800">Liste des utilisateurs</h2>
      <ul role="list" className="divide-y divide-gray-100">
        {data?.map((user: User) => (
          <li key={user.id} className="flex justify-between gap-x-6 py-5">
            <div className="flex min-w-0 gap-x-4">
              <img
                alt=""
                src={`https://ui-avatars.com/api/?name=${user.firstName}+${user.lastName}&background=random`}
                className="h-12 w-12 flex-none rounded-full bg-gray-50"
              />
              <div className="min-w-0 flex-auto">
                <p className="text-sm font-semibold text-gray-900">
                  {user.firstName} {user.lastName}
                </p>
                <p className="mt-1 truncate text-xs text-gray-500">{user.email}</p>
              </div>
            </div>
            <div className="hidden shrink-0 sm:flex sm:flex-col sm:items-end">
              <p className="text-sm text-gray-900">Utilisateur</p>
              <div className="mt-1 flex items-center gap-x-1.5">
                <div className="flex-none rounded-full bg-emerald-500/20 p-1">
                  <div className="h-1.5 w-1.5 rounded-full bg-emerald-500" />
                </div>
                <p className="text-xs text-gray-500">En ligne</p>
              </div>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default UserList;
:::Fin UserList:::

:::UserForm:::
import { useState } from "react";
import axios from "axios";
import { useQueryClient, useMutation } from "@tanstack/react-query";

const UserForm = () => {
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
  });

  const [errors, setErrors] = useState({
    firstName: "",
    lastName: "",
    email: "",
  });

  const [error, setError] = useState<string | null>(null);

  const queryClient = useQueryClient();

  const mutation = useMutation({
    mutationFn: async (newUser: typeof formData) => {
      return axios.post("http://localhost:3003/users", newUser);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["users"] });
      setFormData({ firstName: "", lastName: "", email: "" }); // Réinitialisation du formulaire
      setErrors({ firstName: "", lastName: "", email: "" });
      setError(null);
    },
    onError: (err) => {
      setError("Une erreur est survenue. Veuillez réessayer.");
      console.error("Erreur:", err);
    },
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });

    // Validation en temps réel
    if (name === "firstName" && value.trim() === "") {
      setErrors((prev) => ({ ...prev, firstName: "Le prénom est obligatoire." }));
    } else if (name === "lastName" && value.trim() === "") {
      setErrors((prev) => ({ ...prev, lastName: "Le nom est obligatoire." }));
    } else if (name === "email" && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
      setErrors((prev) => ({ ...prev, email: "L'email n'est pas valide." }));
    } else {
      setErrors((prev) => ({ ...prev, [name]: "" }));
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.firstName || !formData.lastName || !formData.email) {
      setError("Tous les champs sont obligatoires.");
      return;
    }
    mutation.mutate(formData);
  };

  return (
    <form onSubmit={handleSubmit} className="p-4 border rounded shadow-md max-w-md mx-auto bg-white">
      <h2 className="text-lg font-bold mb-4 text-center">Ajouter un utilisateur</h2>

      {error && <p className="text-red-500 text-center mb-4">{error}</p>}

      <div className="mb-4">
        <input
          type="text"
          name="firstName"
          placeholder="Prénom"
          value={formData.firstName}
          onChange={handleChange}
          className={`border p-2 w-full rounded ${errors.firstName ? "border-red-500" : "border-gray-300"}`}
        />
        {errors.firstName && <p className="text-red-500 text-sm mt-1">{errors.firstName}</p>}
      </div>

      <div className="mb-4">
        <input
          type="text"
          name="lastName"
          placeholder="Nom"
          value={formData.lastName}
          onChange={handleChange}
          className={`border p-2 w-full rounded ${errors.lastName ? "border-red-500" : "border-gray-300"}`}
        />
        {errors.lastName && <p className="text-red-500 text-sm mt-1">{errors.lastName}</p>}
      </div>

      <div className="mb-4">
        <input
          type="email"
          name="email"
          placeholder="Email"
          value={formData.email}
          onChange={handleChange}
          className={`border p-2 w-full rounded ${errors.email ? "border-red-500" : "border-gray-300"}`}
        />
        {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email}</p>}
      </div>

      <button
        type="submit"
        className="bg-blue-500 text-white px-4 py-2 rounded w-full disabled:opacity-50"
        disabled={mutation.status === "pending"}
      >
        {mutation.status === "pending" ? "Ajout en cours..." : "Ajouter"}
      </button>
    </form>
  );
};

export default UserForm;
:::Fin UserForm:::


:::uzodgu::::
import React, { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import axios from "axios";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { Disclosure, Menu, Transition } from "@headlessui/react";
import { Bars3Icon, BellIcon, XMarkIcon, HeartIcon, ChatBubbleLeftEllipsisIcon } from "@heroicons/react/24/outline";

// Fonction pour récupérer les posts
const fetchPosts = async () => {
    const { data } = await axios.get("http://localhost:3003/posts");
    return data;
};

// Fonction pour liker un post
const likePost = async (postId: string) => {
    const token = localStorage.getItem("token");
    if (!token) {
        throw new Error("Utilisateur non authentifié");
    }
    const { data } = await axios.post(`http://localhost:3003/posts/${postId}/like`, {}, {
        headers: {
            Authorization: `Bearer ${token}`,
        },
    });
    return data;
};

// Fonction pour récupérer les informations de l'utilisateur connecté
const fetchUserInfo = async () => {
    const token = localStorage.getItem("token");
    if (!token) {
        throw new Error("Utilisateur non authentifié");
    }
    const { data } = await axios.get("http://localhost:3003/auth/me", {
        headers: {
            Authorization: `Bearer ${token}`,
        },
    });
    return data;
};

const Dashboard = () => {
    const queryClient = useQueryClient();
    const [newPost, setNewPost] = useState({ title: "", content: "" });

    // Récupération des posts
    const { data: posts, isLoading, error } = useQuery({
        queryKey: ["posts"],
        queryFn: fetchPosts,
    });

    // Récupération des informations de l'utilisateur connecté
    const { data: userInfo } = useQuery({
        queryKey: ["userInfo"],
        queryFn: fetchUserInfo,
    });

    // Mutation pour liker un post
    const likeMutation = useMutation({
        mutationFn: likePost,
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ["posts"] }); // Recharge les posts après un like
        },
        onError: () => {
            toast.error("Erreur lors du like.");
        },
    });

    const handleLike = (postId: string) => {
        likeMutation.mutate(postId);
    };

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setNewPost({ ...newPost, [name]: value });
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        if (!newPost.title || !newPost.content) {
            toast.error("Veuillez remplir tous les champs.");
            return;
        }
        // Mutation pour créer un post (non modifiée ici)
    };

    if (isLoading) return <p>Chargement des posts...</p>;
    if (error) return <p>Erreur lors du chargement des posts.</p>;

    return (
        <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex flex-col">
            {/* Navbar */}
            <Disclosure as="nav" className="bg-gray-800">
                {({ open }) => (
                    <>
                        <div className="mx-auto max-w-7xl px-2 sm:px-6 lg:px-8">
                            <div className="relative flex h-16 items-center justify-between">
                                <div className="absolute inset-y-0 left-0 flex items-center sm:hidden">
                                    <Disclosure.Button className="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
                                        <span className="sr-only">Open main menu</span>
                                        {open ? (
                                            <XMarkIcon className="block h-6 w-6" aria-hidden="true" />
                                        ) : (
                                            <Bars3Icon className="block h-6 w-6" aria-hidden="true" />
                                        )}
                                    </Disclosure.Button>
                                </div>
                                <div className="flex flex-1 items-center justify-center sm:items-stretch sm:justify-start">
                                    <div className="flex flex-shrink-0 items-center">
                                        <img
                                            className="h-8 w-auto"
                                            src="https://tailwindcss.com/plus-assets/img/logos/mark.svg?color=indigo&shade=500"
                                            alt="Your Company"
                                        />
                                    </div>
                                </div>
                                <div className="absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0">
                                    <span className="text-white">{`${userInfo?.firstName} ${userInfo?.lastName}`}</span>
                                </div>
                            </div>
                        </div>
                    </>
                )}
            </Disclosure>

            {/* Main Content */}
            <div className="flex-1 overflow-y-auto p-6">
                <ToastContainer />
                <div className="space-y-4">
                    {posts.map((post: any) => (
                        <div
                            key={post._id}
                            className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 flex flex-col space-y-4"
                        >
                            <div className="flex items-center space-x-4">
                                <img
                                    className="h-10 w-10 rounded-full bg-gray-50 dark:bg-gray-700"
                                    src={`https://ui-avatars.com/api/?name=${post.author.firstName}+${post.author.lastName}&background=random`}
                                    alt={`${post.author.firstName} ${post.author.lastName}`}
                                />
                                <div>
                                    <p className="text-sm font-semibold text-gray-900 dark:text-white">
                                        {post.author.firstName} {post.author.lastName}
                                    </p>
                                </div>
                            </div>
                            <div>
                                <h3 className="text-lg font-semibold text-gray-800 dark:text-white">{post.title}</h3>
                                <p className="text-gray-600 dark:text-gray-400">{post.content}</p>
                            </div>
                            <div className="flex items-center space-x-4">
                                <button
                                    onClick={() => handleLike(post._id)}
                                    className="flex items-center text-gray-500 dark:text-gray-400 hover:text-red-500"
                                >
                                    <HeartIcon className="h-5 w-5 mr-1" />
                                    <span>{post.likes.length}</span>
                                </button>
                                <button className="flex items-center text-gray-500 dark:text-gray-400 hover:text-blue-500">
                                    <ChatBubbleLeftEllipsisIcon className="h-5 w-5 mr-1" />
                                    <span>{post.comments.length}</span>
                                </button>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};

export default Dashboard;
::::eigxe:::